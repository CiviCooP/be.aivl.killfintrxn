<?php

/**
 * Class to process financial items
 *
 * @author Erik Hommel (CiviCooP) <erik.hommel@civicoop.org>
 * @date 24 Jan 2017
 * @license AGPL-3.0
 * @link https://civicoop.plan.io/projects/aivl-civicrm-ontwikkeling-2016/wiki/Contact_Processing_from_Petition
 */
class CRM_Killfintrxn_FinancialTrxn {
  /**
   * Method to process post hook
   *
   * We want to delete all the financial transactions, entity financial transactions and financial items from
   * the database that were NOT generated by the specific Amnesty extension
   *
   * @param $op
   * @param $objectName
   * @param $objectId
   * @param $objectRef
   */
  public static function post($op, $objectName, $objectId, &$objectRef) {
    // in case of Contribution and edit (balancing transactions created) remove entity_financial_trxn and
    // financial_trxn that were not created by fintrxn extension
    if ($objectName == "Contribution" && $op == "edit") {
      self::deleteContributionTrxn($objectId);
    }

    // in case of FinancialItem and create (new stuff) remove financial items, entity_financial_trxn and financial_trxn
    if ($objectName == "FinancialItem" && $op == "create") {
      self::deleteFinancialItemTrxn($objectId);
    }
  }

  /**
   * Method to delete unwanted transactions created after contribution edit
   *
   * @param $contributionId
   */
  private static function deleteContributionTrxn($contributionId) {
    $financialTrxnIds = array();
    $sql = "SELECT eft.financial_trxn_id 
          FROM civicrm_entity_financial_trxn eft JOIN civicrm_financial_trxn trxn ON eft.financial_trxn_id = trxn.id
          WHERE eft.entity_table = %1 AND eft.entity_id = %2 AND (trxn.check_number != %3 OR trxn.check_number IS NULL)";
    $sqlParams = array(
      1 => array('civicrm_contribution', 'String'),
      2 => array($contributionId, 'Integer'),
      3 => array('AIVL fintrxn', 'String'),
    );
    $dao = CRM_Core_DAO::executeQuery($sql, $sqlParams);

    while ($dao->fetch()) {
      $financialTrxnIds[] = $dao->financial_trxn_id;
    }
    foreach ($financialTrxnIds as $financialTrxnId) {
      $sqlEntity = "DELETE FROM civicrm_entity_financial_trxn WHERE financial_trxn_id = %1";
      $sqlParams = array(
        1 => array($financialTrxnId, 'Integer'),
      );
      CRM_Core_DAO::executeQuery($sqlEntity, $sqlParams);
      try {
        civicrm_api3('FinancialTrxn', 'delete', array(
          'id' => $financialTrxnId,
        ));
      }
      catch (CiviCRM_API3_Exception $ex) {
      }
    }
  }

  /**
   * Method to delete unwanted financial transactions after creating financial item
   *
   * @param $contributionId
   */
  private static function deleteFinancialItemTrxn($contributionId) {
    // first find financial_trxn_id from civicrm_entity_financial_trxn
    try {
      $financialTrxnId = civicrm_api3('EntityFinancialTrxn', 'getvalue', array(
        'entity_table' => 'civicrm_financial_item',
        'entity_id' => $contributionId,
        'return' => 'financial_trxn_id',
      ));
      // now first delete the entity_financial_trxn, then the financial_trxn and finally the financial_item if 4.6 else leave
      // the financial item
      $sqlEntity = 'DELETE FROM civicrm_entity_financial_trxn WHERE financial_trxn_id = %1';
      CRM_Core_DAO::executeQuery($sqlEntity, array(1 => array($financialTrxnId, 'Integer')));
      civicrm_api3('FinancialTrxn', 'delete', array('id' => $financialTrxnId));
      $apiVersion = civicrm_api3('Domain', 'getvalue', array('current_domain' => "TRUE", 'return' => 'version'));
      $civiVersion = (float) substr($apiVersion, 0, 3);
      if ($civiVersion < 4.7) {
        $sqlFinItem = 'DELETE FROM civicrm_financial_item WHERE id = %1';
        CRM_Core_DAO::executeQuery($sqlFinItem, array(1 => array($contributionId, 'Integer')));
      }
    }
    catch (CiviCRM_API3_Exception $ex) {}
  }

}
